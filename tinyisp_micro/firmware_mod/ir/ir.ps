%!PS-Adobe-3.0
%%Creator: gEDA gschem 20060906
%%CreationDate: Fri Dec 15 00:29:56 2006
%%Title: /tmp/release8440/usbtiny-1.3/ir/ir.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

% Show a string, with an overbar over it
% string charshow -
/charshow {
    drawoverbar {
	% draw an overbar for the character
	gsave
	fontsize 10.0 div setlinewidth
	0 fontsize rmoveto  % move to (0,overbarheight) 
	dup stringwidth pop 0 rlineto % draw line to 
	stroke
	grestore
    } if
    show
} bind def

/overbarshow {
    /drawoverbar false def      % start by not drawing overbars
    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		/drawoverbar drawoverbar not def
	    } {
		% otherwise render the character 
		(\\ ) dup 1 4 -1 roll put % draw a \ and the character
		charshow                      % render the string
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
		% no, reset flag and draw character
		( ) dup 0 4 -1 roll put	% create one character string
		charshow
	    } ifelse
	} ifelse
    } forall
} bind def
% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
386 3359 translate
0.740547 0.740547 scale
-54500 -52200 translate
gsave
57800 56200 57650 56200 10 line
56900 56200 57052 56200 10 line
57050 56100 57650 56100 2 line
57650 56100 57650 56300 2 line
57650 56300 57050 56300 2 line
57050 56300 57050 56100 2 line
grestore
gsave
false false false false 260.000000 [(68) ] 0 57075 56350 138.888885 text
grestore
gsave
57800 55400 57650 55400 10 line
56900 55400 57052 55400 10 line
57050 55300 57650 55300 2 line
57650 55300 57650 55500 2 line
57650 55500 57050 55500 2 line
57050 55500 57050 55300 2 line
grestore
gsave
false false false false 260.000000 [(68) ] 0 57075 55550 138.888885 text
grestore
gsave
56900 55800 57050 55800 10 line
57800 55800 57648 55800 10 line
57050 55700 57650 55700 2 line
57650 55700 57650 55900 2 line
57650 55900 57050 55900 2 line
57050 55900 57050 55700 2 line
grestore
gsave
false false false false 260.000000 [(1K5) ] 0 57050 55950 138.888885 text
grestore
60000 53500 60000 53700 10 line
gsave
false false false false 208.000000 [(1) ] 0 60050 53600 111.111115 text
grestore
gsave
true false false false 208.000000 [(Reset) ] 0 60000 53850 111.111115 text
grestore
59808 53974 60192 53974 2 line
60000 53750 50 0 360 2 darc
59300 53500 59300 53800 10 line
gsave
false false false false 208.000000 [(4) ] 0 59350 53600 111.111115 text
grestore
gsave
true false false false 208.000000 [(XTAL2) ] 0 59300 53850 111.111115 text
grestore
58600 53500 58600 53800 10 line
gsave
false false false false 208.000000 [(5) ] 0 58650 53600 111.111115 text
grestore
gsave
true false false false 208.000000 [(XTAL1) ] 0 58600 53850 111.111115 text
grestore
58000 54600 58300 54600 10 line
gsave
false true false false 208.000000 [(11) ] 0 58200 54650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD6 \(ICP\)) ] 0 58350 54600 111.111115 text
grestore
58000 55000 58300 55000 10 line
gsave
false true false false 208.000000 [(9) ] 0 58200 55050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD5 \(T1\)) ] 0 58350 55000 111.111115 text
grestore
58000 55400 58300 55400 10 line
gsave
false true false false 208.000000 [(8) ] 0 58200 55450 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD4 \(T0\)) ] 0 58350 55400 111.111115 text
grestore
58000 55800 58300 55800 10 line
gsave
false true false false 208.000000 [(7) ] 0 58200 55850 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD3 \(INT1\)) ] 0 58350 55800 111.111115 text
grestore
58000 56200 58300 56200 10 line
gsave
false true false false 208.000000 [(6) ] 0 58200 56250 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD2 \(INT0\)) ] 0 58350 56200 111.111115 text
grestore
58000 56600 58300 56600 10 line
gsave
false true false false 208.000000 [(3) ] 0 58200 56650 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD1 \(TXD\)) ] 0 58350 56600 111.111115 text
grestore
58000 57000 58300 57000 10 line
gsave
false true false false 208.000000 [(2) ] 0 58200 57050 111.111115 text
grestore
gsave
false false false false 208.000000 [(PD0 \(RXD\)) ] 0 58350 57000 111.111115 text
grestore
60600 54200 60300 54200 10 line
gsave
false false false false 208.000000 [(19) ] 0 60400 54250 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(SCK\) PB7) ] 0 60250 54200 111.111115 text
grestore
60600 54600 60300 54600 10 line
gsave
false false false false 208.000000 [(18) ] 0 60400 54650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(MISO\) PB6) ] 0 60250 54600 111.111115 text
grestore
60600 55000 60300 55000 10 line
gsave
false false false false 208.000000 [(17) ] 0 60400 55050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(MOSI\) PB5) ] 0 60250 55000 111.111115 text
grestore
60600 55400 60300 55400 10 line
gsave
false false false false 208.000000 [(16) ] 0 60400 55450 111.111115 text
grestore
gsave
false true false false 208.000000 [(PB4) ] 0 60250 55400 111.111115 text
grestore
60600 55800 60300 55800 10 line
gsave
false false false false 208.000000 [(15) ] 0 60400 55850 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(OC1\) PB3) ] 0 60250 55800 111.111115 text
grestore
60600 56200 60300 56200 10 line
gsave
false false false false 208.000000 [(14) ] 0 60400 56250 111.111115 text
grestore
gsave
false true false false 208.000000 [(PB2) ] 0 60250 56200 111.111115 text
grestore
60600 56600 60300 56600 10 line
gsave
false false false false 208.000000 [(13) ] 0 60400 56650 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AIN1\) PB1) ] 0 60250 56600 111.111115 text
grestore
60600 57000 60300 57000 10 line
gsave
false false false false 208.000000 [(12) ] 0 60400 57050 111.111115 text
grestore
gsave
false true false false 208.000000 [(\(AIN0\) PB0) ] 0 60250 57000 111.111115 text
grestore
58300 53800 60300 53800 2 line
60300 53800 60300 57400 2 line
60300 57400 58300 57400 2 line
58300 57400 58300 53800 2 line
gsave
false false false false 260.000000 [(ATtiny2313) ] 0 58300 57450 138.888885 text
grestore
gsave
55900 55100 56200 55100 10 line
gsave
false false false false 208.000000 [(3) ] 0 54750 55050 111.111115 text
grestore
55900 55400 56200 55400 10 line
gsave
false false false false 208.000000 [(2) ] 0 54750 55350 111.111115 text
grestore
55900 54800 56200 54800 10 line
gsave
false false false false 208.000000 [(4) ] 0 54750 54750 111.111115 text
grestore
55900 55400 55000 55400 2 line
55900 55100 55000 55100 2 line
55900 54800 55000 54800 2 line
55900 55700 56200 55700 10 line
gsave
false false false false 208.000000 [(1) ] 0 54750 55650 111.111115 text
grestore
55900 55700 55000 55700 2 line
54500 54600 55000 54600 2 line
55000 54600 55000 55900 2 line
55000 55900 54500 55900 2 line
54500 55900 54500 54600 2 line
grestore
gsave
false false false false 260.000000 [(USB) ] 0 54500 56000 138.888885 text
grestore
56200 55100 56600 55100 10 line
56600 55100 56600 56200 10 line
56600 56200 56900 56200 10 line
58600 53500 58600 53400 10 line
59300 53500 59300 53400 10 line
57800 56200 58000 56200 10 line
57800 55400 58000 55400 10 line
56200 54800 56200 52500 10 line
gsave
false false false false 260.000000 [(IR receiver and LCD controller with USB interface) ] 0 60700 52200 138.888885 text
grestore
gsave
false false false false 260.000000 [(Vcc) ] 0 55100 55800 138.888885 text
grestore
gsave
false false false false 260.000000 [(D-) ] 0 55100 55500 138.888885 text
grestore
gsave
false false false false 260.000000 [(D+) ] 0 55100 55200 138.888885 text
grestore
gsave
false false false false 260.000000 [(GND) ] 0 55100 54900 138.888885 text
grestore
gsave
58600 53400 58800 53400 10 line
59100 53400 59300 53400 10 line
58850 53300 59050 53300 2 line
59050 53300 59050 53500 2 line
59050 53500 58850 53500 2 line
58850 53500 58850 53300 2 line
58800 53540 58800 53260 2 line
59100 53540 59100 53260 2 line
grestore
gsave
false false false false 260.000000 [(12MHz) ] 0 58650 53100 138.888885 text
grestore
gsave
60000 53400 60000 53200 10 line
gsave
false false false false 208.000000 [(1) ] 90 59950 53250 111.111115 text
grestore
60000 52500 60000 52700 10 line
gsave
false true false false 208.000000 [(2) ] 90 59950 52650 111.111115 text
grestore
59800 52850 60200 52850 2 line
60000 52700 60000 52850 2 line
60000 53050 60000 53200 2 line
59800 53161 59900 53161 2 line
59851 53110 59851 53210 2 line
59800 52950 60200 52950 2 line
60200 52950 60200 53050 2 line
60200 53050 59800 53050 2 line
59800 53050 59800 52950 2 line
newpath
60000 52500
30
0 360 arc
fill
newpath
60000 52500
30
0 360 arc
fill
grestore
gsave
false true false false 260.000000 [(1uF) ] 0 60300 52700 138.888885 text
grestore
gsave
56200 52300 56200 52500 10 line
56100 52300 56300 52300 2 line
56155 52250 56245 52250 2 line
56180 52210 56220 52210 2 line
grestore
gsave
59300 52500 59300 52700 10 line
59300 53400 59300 53200 10 line
59100 52900 59500 52900 2 line
59100 53000 59500 53000 2 line
59300 53200 59300 53000 2 line
59300 52900 59300 52700 2 line
newpath
59300 52500
30
0 360 arc
fill
newpath
59300 52500
30
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(27pF) ] 0 59800 52800 138.888885 text
grestore
gsave
58600 52500 58600 52700 10 line
58600 53400 58600 53200 10 line
58400 52900 58800 52900 2 line
58400 53000 58800 53000 2 line
58600 53200 58600 53000 2 line
58600 52900 58600 52700 2 line
newpath
58600 52500
30
0 360 arc
fill
newpath
58600 52500
30
0 360 arc
fill
grestore
gsave
false true false true 260.000000 [(27pF) ] 0 59100 52800 138.888885 text
grestore
gsave
56600 53400 56600 53200 10 line
56600 52500 56600 52700 10 line
56700 53000 56600 52900 2 line
56600 52900 56500 53000 2 line
56700 53000 56500 53000 2 line
56700 52900 56500 52900 2 line
56600 52900 56600 52700 2 line
56600 53000 56600 53200 2 line
56740 52970 56840 52870 2 line
56840 52870 56810 52920 2 line
56840 52870 56790 52900 2 line
56740 52900 56840 52800 2 line
56840 52800 56810 52850 2 line
56840 52800 56790 52830 2 line
newpath
56600 52500
30
0 360 arc
fill
newpath
56600 52500
30
0 360 arc
fill
grestore
gsave
56600 53400 56600 53550 10 line
56600 54300 56600 54148 10 line
56500 53550 56700 53550 2 line
56700 53550 56700 54150 2 line
56700 54150 56500 54150 2 line
56500 54150 56500 53550 2 line
grestore
gsave
false true false true 260.000000 [(330) ] 0 56600 54300 138.888885 text
grestore
gsave
60500 53750 50 0 360 2 darc
60500 53700 60500 53400 10 line
gsave
false false false false 260.000000 [(Vcc) ] 0 60300 53850 138.888885 text
grestore
grestore
56800 54200 57800 54200 2 line
57800 54200 57800 54800 2 line
56800 54800 56800 54200 2 line
57700 54200 57700 53900 10 line
gsave
false false false false 208.000000 [(3) ] 0 57750 54050 111.111115 text
grestore
57200 54200 57200 53900 10 line
gsave
false false false false 208.000000 [(2) ] 0 57250 54050 111.111115 text
grestore
56900 54200 56900 53900 10 line
gsave
false false false false 208.000000 [(1) ] 0 56950 54050 111.111115 text
grestore
gsave
false false false false 208.000000 [(TSOP1738) ] 0 56925 54450 111.111115 text
grestore
56800 54800 57800 54800 2 line
gsave
57500 53750 50 0 360 2 darc
57500 53700 57500 53400 10 line
gsave
false false false false 260.000000 [(Vcc) ] 0 57300 53850 138.888885 text
grestore
grestore
56900 53900 56900 52500 10 line
58000 54600 58000 53900 10 line
58000 53900 57700 53900 10 line
60600 57000 61400 57000 10 line
61400 57000 61400 54400 10 line
61400 54400 62400 54400 10 line
60600 56600 61200 56600 10 line
61200 56600 61200 54100 10 line
61200 54100 62400 54100 10 line
60600 56200 61000 56200 10 line
61000 56200 61000 53800 10 line
61000 53800 62400 53800 10 line
60600 55800 60800 55800 10 line
60800 53500 62400 53500 10 line
62400 56500 61600 56500 10 line
61600 56500 61600 55400 10 line
61600 55400 60600 55400 10 line
62400 56200 61800 56200 10 line
61800 56200 61800 55000 10 line
61800 55000 60600 55000 10 line
60600 54600 62000 54600 10 line
62000 54600 62000 55900 10 line
62000 55900 62400 55900 10 line
gsave
62300 57400 62100 57400 10 line
61600 57400 61400 57400 10 line
61800 57100 61800 56900 10 line
61600 57300 62100 57300 2 line
62100 57300 62100 57500 2 line
62100 57500 61600 57500 2 line
61600 57500 61600 57300 2 line
61800 57100 61800 57300 2 line
61800 57300 61850 57200 2 line
61800 57300 61750 57200 2 line
grestore
gsave
false false false false 260.000000 [(10K) ] 0 61650 57600 138.888885 text
grestore
gsave
62300 57200 62300 57400 10 line
62200 57200 62400 57200 2 line
62255 57150 62345 57150 2 line
62280 57110 62320 57110 2 line
grestore
62400 56800 61800 56800 10 line
61800 56800 61800 56900 10 line
62300 57400 62400 57400 10 line
gsave
61400 57750 50 0 360 2 darc
61400 57700 61400 57400 10 line
gsave
false false false false 260.000000 [(Vcc) ] 0 61200 57850 138.888885 text
grestore
grestore
62400 57100 61400 57100 10 line
61400 57100 61400 57400 10 line
56200 55400 56900 55400 10 line
60000 53500 60000 53400 10 line
62700 52600 64900 52600 2 line
64900 52600 64900 57700 2 line
64900 57700 62700 57700 2 line
62700 57700 62700 52600 2 line
gsave
false false false false 208.000000 [(VSS \(GND\)) ] 0 62775 57400 111.111115 text
grestore
62700 57400 62400 57400 10 line
gsave
false false false false 208.000000 [(1) ] 0 62536 57450 111.111115 text
grestore
gsave
false false false false 208.000000 [(VDD \(VCC\)) ] 0 62775 57100 111.111115 text
grestore
62700 57100 62400 57100 10 line
gsave
false false false false 208.000000 [(2) ] 0 62496 57150 111.111115 text
grestore
gsave
false false false false 208.000000 [(V0) ] 0 62775 56800 111.111115 text
grestore
62700 56800 62400 56800 10 line
gsave
false false false false 208.000000 [(3) ] 0 62520 56850 111.111115 text
grestore
gsave
false false false false 208.000000 [(RS) ] 0 62775 56500 111.111115 text
grestore
62700 56500 62400 56500 10 line
gsave
false false false false 208.000000 [(4) ] 0 62496 56550 111.111115 text
grestore
gsave
false false false false 208.000000 [(R/W) ] 0 62775 56200 111.111115 text
grestore
62700 56200 62400 56200 10 line
gsave
false false false false 208.000000 [(5) ] 0 62520 56250 111.111115 text
grestore
gsave
false false false false 208.000000 [(E) ] 0 62775 55900 111.111115 text
grestore
62700 55900 62400 55900 10 line
gsave
false false false false 208.000000 [(6) ] 0 62504 55950 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB0) ] 0 62750 55600 111.111115 text
grestore
62700 55600 62400 55600 10 line
gsave
false false false false 208.000000 [(7) ] 0 62520 55650 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB1) ] 0 62750 55300 111.111115 text
grestore
62700 55300 62400 55300 10 line
gsave
false false false false 208.000000 [(8) ] 0 62512 55350 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB2) ] 0 62750 55000 111.111115 text
grestore
62700 55000 62400 55000 10 line
gsave
false false false false 208.000000 [(9) ] 0 62496 55050 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB3) ] 0 62750 54700 111.111115 text
grestore
62400 54700 62700 54700 10 line
gsave
false false false false 208.000000 [(10) ] 0 62500 54750 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB4) ] 0 62750 54400 111.111115 text
grestore
62400 54400 62700 54400 10 line
gsave
false false false false 208.000000 [(11) ] 0 62500 54450 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB5) ] 0 62750 54100 111.111115 text
grestore
62400 54100 62700 54100 10 line
gsave
false false false false 208.000000 [(12) ] 0 62500 54150 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB6) ] 0 62750 53800 111.111115 text
grestore
62400 53800 62700 53800 10 line
gsave
false false false false 208.000000 [(13) ] 0 62500 53850 111.111115 text
grestore
gsave
false false false false 208.000000 [(DB7) ] 0 62750 53500 111.111115 text
grestore
62400 53500 62700 53500 10 line
gsave
false false false false 208.000000 [(14) ] 0 62500 53550 111.111115 text
grestore
gsave
false false false false 208.000000 [(A ) ] 0 62750 53200 111.111115 text
grestore
62400 53200 62700 53200 10 line
gsave
false false false false 208.000000 [(15) ] 0 62500 53250 111.111115 text
grestore
gsave
false false false false 208.000000 [(K) ] 0 62750 52900 111.111115 text
grestore
62400 52900 62700 52900 10 line
gsave
false false false false 208.000000 [(16) ] 0 62500 52950 111.111115 text
grestore
63700 52800 64700 52800 2 line
64700 52800 64700 57500 2 line
64700 57500 63700 57500 2 line
63700 57500 63700 52800 2 line
62900 56350 63100 56350 2 line
gsave
false false false false 390.000000 [(LCD) ] 0 63900 55200 208.333328 text
grestore
gsave
57200 53400 57200 53200 10 line
gsave
false false false false 208.000000 [(1) ] 90 57150 53250 111.111115 text
grestore
57200 52500 57200 52700 10 line
gsave
false true false false 208.000000 [(2) ] 90 57150 52650 111.111115 text
grestore
57000 52850 57400 52850 2 line
57200 52700 57200 52850 2 line
57200 53050 57200 53200 2 line
57000 53161 57100 53161 2 line
57051 53110 57051 53210 2 line
57000 52950 57400 52950 2 line
57400 52950 57400 53050 2 line
57400 53050 57000 53050 2 line
57000 53050 57000 52950 2 line
newpath
57200 52500
30
0 360 arc
fill
newpath
57200 52500
30
0 360 arc
fill
grestore
gsave
false true false false 260.000000 [(1uF) ] 0 57500 52700 138.888885 text
grestore
56600 54300 56600 55000 10 line
56600 55000 58000 55000 10 line
57800 55800 58000 55800 10 line
gsave
56200 56050 50 0 360 2 darc
56200 56000 56200 55700 10 line
gsave
false false false false 260.000000 [(Vcc) ] 0 56000 56150 138.888885 text
grestore
grestore
56900 55800 56800 55800 10 line
56800 55800 56800 55400 10 line
57200 53900 57200 53400 10 line
gsave
60800 52500 60800 52650 10 line
60800 53400 60800 53248 10 line
60700 52650 60900 52650 2 line
60900 52650 60900 53250 2 line
60900 53250 60700 53250 2 line
60700 53250 60700 52650 2 line
grestore
gsave
false false false true 260.000000 [(22K) ] 0 60300 53000 138.888885 text
grestore
57200 53400 57500 53400 10 line
60000 53400 60500 53400 10 line
56200 52500 60800 52500 10 line
60800 53400 60800 55800 10 line
newpath
58600 53400
30
0 360 arc
fill
newpath
59300 53400
30
0 360 arc
fill
newpath
56200 52500
30
0 360 arc
fill
newpath
60000 52500
30
0 360 arc
fill
newpath
60000 52500
30
0 360 arc
fill
newpath
59300 52500
30
0 360 arc
fill
newpath
59300 52500
30
0 360 arc
fill
newpath
58600 52500
30
0 360 arc
fill
newpath
58600 52500
30
0 360 arc
fill
newpath
56600 52500
30
0 360 arc
fill
newpath
56600 52500
30
0 360 arc
fill
newpath
56900 52500
30
0 360 arc
fill
newpath
56900 52500
30
0 360 arc
fill
newpath
60800 53500
30
0 360 arc
fill
newpath
60800 53500
30
0 360 arc
fill
newpath
62300 57400
30
0 360 arc
fill
newpath
61400 57400
30
0 360 arc
fill
newpath
56800 55400
30
0 360 arc
fill
newpath
60000 53400
30
0 360 arc
fill
newpath
57200 52500
30
0 360 arc
fill
newpath
57200 52500
30
0 360 arc
fill
newpath
56800 55400
30
0 360 arc
fill
newpath
56800 55400
30
0 360 arc
fill
newpath
57200 53400
30
0 360 arc
fill
newpath
57200 53400
30
0 360 arc
fill
newpath
60000 53400
30
0 360 arc
fill
newpath
56200 52500
30
0 360 arc
fill
newpath
60000 52500
30
0 360 arc
fill
newpath
59300 52500
30
0 360 arc
fill
newpath
58600 52500
30
0 360 arc
fill
newpath
56600 52500
30
0 360 arc
fill
newpath
56900 52500
30
0 360 arc
fill
newpath
57200 52500
30
0 360 arc
fill
newpath
60800 53500
30
0 360 arc
fill
showpage
%%End
